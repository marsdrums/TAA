<jittershader name="fill-flat-quads">
	<description>Default Shader </description>
	<param name="pos" type="vec3" state="POSITION" />
	<param name="nor" type="vec3" state="NORMAL" />
	<param name="MVP" 	type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="prevMVP" type="mat4" state="PREV_MODELVIEW_PROJECTION_MATRIX" />
	<param name="MV"	type="mat4" state="MODELVIEW_MATRIX" />
	<param name="M" 	type="mat4" state="WORLD_MATRIX" />
	<param name="NM"	type="mat3" state="NORMAL_MATRIX" />
	<param name="Vmat" 	type="mat4" state="VIEW_MATRIX" />
	<param name="Pmat"  type="mat4" state="PROJECTION_MATRIX" />
	<param name="eye" 	type="vec3" state="CAMERA_POSITION" />
	<param name="far"  	type="float" state="FAR_CLIP" />
	<param name="near"  type="float" state="NEAR_CLIP" />
	<param name="color" type="vec4" state="COLOR" />
	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<param name="time" type="float" default="0." />
	<param name="eye" type="vec3" state="CAMERA_POSITION" />
	<param name="grid" type="float" default="0.2" />
	<language name="glsl" version="1.5">
		<bind param="pos" program="vp" />
		<bind param="nor" program="vp" />
		<bind param="MVP" 	program="vp" />
		<bind param="prevMVP" program="vp" />
		<bind param="MV"	program="vp" />
		<bind param="M" 	program="vp" />
		<bind param="NM"	program="vp" />
		<bind param="Vmat" 	program="fp" />
		<bind param="Pmat" 	program="fp" />
		<bind param="eye" 	program="fp" />
		<bind param="far"   program="fp" />
		<bind param="near"  program="fp" />
		<bind param="color" program="vp" />
		<bind param="viewPort" program="vp" />
		<bind param="time" program="vp" />
		<bind param="eye" program="fp" />
		<bind param="grid" program="fp" />
		<program name="vp" type="vertex">
<![CDATA[
#version 330 core
uniform mat4 MVP, MV, M, prevMVP;
uniform mat3 NM;
uniform vec2 viewPort;
uniform float time;
in vec3 pos, nor;
in vec4 color;

out jit_PerVertex {
	smooth vec4 color;	
	smooth vec3 nor;
	smooth vec4 currScreenPos;
	smooth vec4 prevScreenPos;
	smooth vec3 pos;
	smooth vec3 modelPos;
	smooth vec3 modelNor;
} jit_out;

vec2 getJitter(int time){

	vec2 halton[16] = vec2[] 	(	vec2(0.500000, 0.333333),
									vec2(0.250000, 0.666667),
									vec2(0.750000, 0.111111),
									vec2(0.125000, 0.444444),
									vec2(0.625000, 0.777778),
									vec2(0.375000, 0.222222),
									vec2(0.875000, 0.555556),
									vec2(0.062500, 0.888889),
									vec2(0.562500, 0.037037),
									vec2(0.312500, 0.370370),
									vec2(0.812500, 0.703704),
									vec2(0.187500, 0.148148),
									vec2(0.687500, 0.481481),
									vec2(0.437500, 0.814815),
									vec2(0.937500, 0.259259),
									vec2(0.031250, 0.592593)
								);

	return ((halton[time%16] - vec2(0.5)) / viewPort) * 2.;
}

void main() {	

	jit_out.currScreenPos = MVP 	* vec4(pos, 1.);	
	jit_out.prevScreenPos = prevMVP * vec4(pos, 1.);
	vec4 currJitter = vec4(getJitter(int(time))*jit_out.currScreenPos.w, 0., 0.);
	gl_Position = jit_out.currScreenPos + currJitter;	
	jit_out.nor = (M * vec4(nor, 0.)).xyz;
	jit_out.pos = (M * vec4(pos, 1.)).xyz;
	jit_out.color = color;
	jit_out.modelPos = pos;
	jit_out.modelNor = nor;
}
]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[
#version 330 core

in jit_PerVertex {
	smooth vec4 color;
	smooth vec3 nor;
	smooth vec4 currScreenPos;
	smooth vec4 prevScreenPos;
	smooth vec3 pos;
	smooth vec3 modelPos;
	smooth vec3 modelNor;
} jit_in;

layout (location = 0) out vec4 color;
layout (location = 1) out vec4 velocity;

uniform vec3 eye;
uniform float grid;

vec2 getVelocity(vec4 newPos, vec4 oldPos){

    oldPos /= oldPos.w;
    oldPos.xy = (oldPos.xy+1)*0.5;
    //oldPos.y = 1 - oldPos.y;
    
    newPos /= newPos.w;
    newPos.xy = (newPos.xy+1)*0.5;
    //newPos.y = 1 - newPos.y;
    
    return (newPos - oldPos).xy;

}
float getPattern(float interval){

	vec3	pos = jit_in.modelPos;
	vec3 	nor = jit_in.modelNor;

	vec3 	k = normalize(pow(abs(nor), vec3(40.)));
	vec2 	Xuv = pos.yz;
	vec2 	Yuv = pos.xz;
	vec2 	Zuv = pos.xy;

	float 	X = k.x * mod((mod(jit_in.modelPos.y, interval) > interval*0.5 ? 1. : 0. ) + (mod(jit_in.modelPos.z, interval) > interval*0.5 ? 1. : 0. ), 2.);
	float 	Y = k.y * mod((mod(jit_in.modelPos.x, interval) > interval*0.5 ? 1. : 0. ) + (mod(jit_in.modelPos.z, interval) > interval*0.5 ? 1. : 0. ), 2.);
	float 	Z = k.z * mod((mod(jit_in.modelPos.x, interval) > interval*0.5 ? 1. : 0. ) + (mod(jit_in.modelPos.y, interval) > interval*0.5 ? 1. : 0. ), 2.);
	return 	(X+Y+Z)/(k.x+k.y+k.z);
}
void main() {

	vec3 L = normalize(vec3(15., -5., 2.));
	vec3 dif = max(dot(L, jit_in.nor), 0.) * vec3(1., 0.9, 0.7)*5.;

	vec3 pattern = vec3(0.4 * getPattern(grid));
	pattern += vec3(0.03);

	float dome = max(jit_in.nor.y, 0.);
	//dome = smoothstep(0.2, 0.5, dome);
	vec3 sky = dome * vec3(0.6, 0.6, 1.);
	dif += sky;
	vec3 amb = (vec3(0.6, 0.6, 1.) + vec3(1., 0.9, 0.5)) * 0.04;
	color.rgb = pattern*(dif+vec3(amb));
	color.a = 1.;
	velocity = vec4(getVelocity(jit_in.currScreenPos, jit_in.prevScreenPos), 0., 1.);
}	
]]>
		</program>
	</language>
</jittershader>
